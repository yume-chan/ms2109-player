{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx","App.module.css"],"names":["MODE_LIST","width","height","frameRate","requestMediaDevicePermission","a","window","navigator","mediaDevices","getUserMedia","video","audio","stream","getTracks","stop","findDevice","devices","type","vid","pid","find","x","kind","label","endsWith","toLowerCase","App","handleVideoRef","useCallback","videoElement","enumerateDevices","videoDevice","audioDevice","mode","deviceId","exact","videoStream","srcObject","groupId","sampleRate","sampleSize","audioStream","context","AudioContext","source","createMediaStreamSource","audioWorklet","addModule","encodeURIComponent","processor","AudioWorkletNode","numberOfInputs","numberOfOutputs","connect","destination","console","error","className","styles","ref","autoPlay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kPAGMA,EAAY,CAChB,CAAEC,MAAO,KAAMC,OAAQ,KAAMC,UAAW,IAExC,CAAEF,MAAO,KAAMC,OAAQ,KAAMC,UAAW,K,SAG3BC,I,2EAAf,gCAAAC,EAAA,sEAEuBC,OAAOC,UAAUC,aAAaC,aAAa,CAC9DC,OAAO,EACPC,OAAO,IAJX,OAEQC,EAFR,qBAQsBA,EAAOC,aAR7B,IAQE,2BAAwC,QAChCC,OATV,0E,sBAaA,SAASC,EAAWC,EAA4BC,EAAmCC,EAAaC,GAI9F,OAAOH,EAAQI,MACb,SAAAC,GAAC,OACCA,EAAEC,OAASL,GACXI,EAAEE,MAAMC,SAAR,WAAqBN,EAAIO,cAAzB,YAA0CN,EAAIM,cAA9C,SAuFSC,MAnFf,WACE,IAAMC,EAAiBC,sBAAW,uCAAC,WAAOC,GAAP,mCAAAxB,EAAA,0DAC7BwB,EAD6B,iCAGzBzB,IAHyB,uBAOTE,OAAOC,UAAUC,aAAasB,mBAPrB,OAOzBd,EAPyB,OAQzBe,EAAchB,EAAWC,EAAS,aAAc,OAAQ,QACxDgB,EAAcjB,EAAWC,EAAS,aAAc,OAAQ,QAT/B,cAaZhB,GAbY,iEAapBiC,EAboB,4BAeD3B,OAAOC,UAAUC,aAAaC,aAAa,CACnEC,MAAO,CACLwB,SAAU,CAAEC,MAAOJ,EAAaG,UAChCjC,MAAO,CAAEkC,MAAOF,EAAKhC,OACrBC,OAAQ,CAAEiC,MAAOF,EAAK/B,QACtBC,UAAW,CAAEgC,MAAOF,EAAK9B,cApBF,eAerBiC,EAfqB,OAuB3BP,EAAaQ,UAAYD,EAvBE,UAyBD9B,OAAOC,UAAUC,aAAaC,aAAa,CACnEE,MAAO,CACL2B,QAAS,CAAEH,MAAOH,EAAaM,SAC/BC,WAAY,KACZC,WAAY,MA7BW,eAyBrBC,EAzBqB,OAiCrBC,EAAU,IAAIC,aAAa,CAAEJ,WAAY,OACzCK,EAASF,EAAQG,wBAAwBJ,GAlCpB,UAmCrBC,EAAQI,aAAaC,UAAU,4CAA8CC,mBAAmB,47BAnC3E,eA8DrBC,EAAY,IAAIC,iBAAiBR,EAAS,kBAAmB,CACjES,eAAgB,EAChBC,gBAAiB,IAEnBR,EAAOS,QAAQJ,GACfA,EAAUI,QAAQX,EAAQY,aAnEC,wDAsE3BC,QAAQC,MAAR,MAtE2B,gNAAD,sDA2E/B,IAEH,OACE,uBAAOC,UAAWC,IAAOhD,MAAOiD,IAAKhC,EAAgBiC,UAAQ,KClGlDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,MAAQ,sB","file":"static/js/main.6ab9deda.chunk.js","sourcesContent":["import { useCallback } from 'react';\nimport styles from './App.module.css';\n\nconst MODE_LIST = [\n  { width: 1920, height: 1080, frameRate: 30 },\n  // MS2109 may output 25FPS when connected to a USB hub\n  { width: 1920, height: 1080, frameRate: 25 },\n];\n\nasync function requestMediaDevicePermission() {\n  // request any media device to trigger the permission popup\n  const stream = await window.navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true,\n  });\n\n  // stop all tracks so they can be requested again\n  for (const track of stream.getTracks()) {\n    track.stop();\n  }\n}\n\nfunction findDevice(devices: MediaDeviceInfo[], type: 'videoinput' | 'audioinput', vid: string, pid: string): MediaDeviceInfo | undefined {\n  // Spec doesn't define how to find a device with specified VID/PID\n  // Chrome appends (vid:pid) to the device label\n  // TODO: make sure it works on Firefox/Safari\n  return devices.find(\n    x =>\n      x.kind === type &&\n      x.label.endsWith(`(${vid.toLowerCase()}:${pid.toLowerCase()})`)\n  );\n}\n\nfunction App() {\n  const handleVideoRef = useCallback(async (videoElement: HTMLVideoElement | null) => {\n    if (videoElement) {\n      // Only `getUserMedia` triggers the permission popup, `enumerateDevices` won't\n      await requestMediaDevicePermission();\n\n      // TODO: handle permission rejected\n\n      const devices = await window.navigator.mediaDevices.enumerateDevices();\n      const videoDevice = findDevice(devices, 'videoinput', '534d', '2109');\n      const audioDevice = findDevice(devices, 'audioinput', '534d', '2109');\n\n      // TODO: handle device not found\n\n      for (const mode of MODE_LIST) {\n        try {\n          const videoStream = await window.navigator.mediaDevices.getUserMedia({\n            video: {\n              deviceId: { exact: videoDevice!.deviceId },\n              width: { exact: mode.width },\n              height: { exact: mode.height },\n              frameRate: { exact: mode.frameRate },\n            },\n          });\n          videoElement.srcObject = videoStream;\n\n          const audioStream = await window.navigator.mediaDevices.getUserMedia({\n            audio: {\n              groupId: { exact: audioDevice!.groupId },\n              sampleRate: 96_000,\n              sampleSize: 16,\n            },\n          });\n\n          const context = new AudioContext({ sampleRate: 96_000 });\n          const source = context.createMediaStreamSource(audioStream);\n          await context.audioWorklet.addModule('data:application/javascript;charset=utf8,' + encodeURIComponent(`\n            class SplitProcessor extends AudioWorkletProcessor {\n              process (inputs, outputs, parameters) {\n                const input = inputs[0][0];\n                const leftOutput = outputs[0][0];\n                const rightOutput = outputs[0][1];\n\n                // Separate interleaved stereo audio into left and right channels\n                let i = 0;\n                while (i < input.length) {\n                  // Web Audio API doesn't support sample rate conversion\n                  // So we have to duplicate the samples\n                  leftOutput[i] = input[i + 1];\n                  leftOutput[i + 1] = input[i + 1];\n\n                  rightOutput[i] = input[i];\n                  rightOutput[i + 1] = input[i];\n\n                  i += 2;\n                }\n\n                return true;\n              }\n            }\n\n            registerProcessor('split-processor', SplitProcessor)\n          `));\n          const processor = new AudioWorkletNode(context, 'split-processor', {\n            numberOfInputs: 1,\n            numberOfOutputs: 1,\n          });\n          source.connect(processor);\n          processor.connect(context.destination);\n          break;\n        } catch (e) {\n          console.error(e);\n          // ignore\n        }\n      }\n    }\n  }, []);\n\n  return (\n    <video className={styles.video} ref={handleVideoRef} autoPlay />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"video\":\"App_video__33LfF\"};"],"sourceRoot":""}